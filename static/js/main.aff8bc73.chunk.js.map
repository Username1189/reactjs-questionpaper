{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","handleRadioChange","event","answers","state","value","id","question_num","target","setState","handleCheckBoxChange","index","choice","String","details","choices","split","slice","push","thisQuestion","splice","indexOf","error","GetRadioCheckBoxCode","elements","correct_ans","correct_answers","i","length","FormControlLabel","control","Radio","label","Checkbox","onChange","e","next","calcTotScore","correctPoints","sort","correct_points","wrong_points","submit","handleRadioCheckBox","radioCheckboxCode","FormGroup","FormControl","component","FormLabel","RadioGroup","name","choice_index","data","axios","get","then","res","catch","err","console","log","thisQues","this","ques_desc","onClick","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aff8bc73.chunk.js","sourcesContent":["import React from 'react';\nimport axios from 'axios';\n// import RadioCheckBox from './RadioCheckBox';\nimport { Radio, RadioGroup, FormControlLabel, FormControl, FormLabel, FormGroup, Checkbox, List } from '@mui/material';\n\nclass App extends React.Component {\n\n    constructor(){\n        super();\n        this.id = 123;\n        this.state = {\n            details : [{}],\n            question_num : 0,\n            choice_index: 0,\n            choices: [],\n            value: {}\n        }\n        let answers = this.state.value;\n        answers[this.id] = {};\n        this.setState({\n            value: answers\n        });\n    }\n  \n    componentDidMount() {\n        let data ;\n        axios.get('http://localhost:8000/mcqs/')\n        .then(res => {\n            data = res.data;\n            this.setState({\n                details : data\n            });\n        \n        })\n        .catch(err => {console.log(err)})\n        // this.fillInStateValue()\n    }\n\n    handleRadioChange = (event) => {\n        let answers = this.state.value;\n        answers[this.id][this.state.question_num] = event.target.value;\n        this.setState({\n            value: answers\n        });\n    }\n\n    handleCheckBoxChange = (event, index) => { // [1, 2, [1, 2], 3]\n        let answers = this.state.value;\n        let choice = String(this.state.details[this.state.question_num].choices).split(\" \").slice(0, -1)[index];\n        try {\n            if (event.target.value === 'on') answers[this.id][this.state.question_num].push(choice);\n            else\n            {\n                let thisQuestion = answers[this.id][this.state.question_num]\n                answers[this.id][this.state.question_num] = thisQuestion.splice(thisQuestion.indexOf(choice), 1);\n            }\n        } catch (error) {\n            answers[this.id][this.state.question_num] = [choice];\n        }\n        this.setState({\n            value: answers\n        });\n    }\n\n    GetRadioCheckBoxCode = () => {\n        const elements = []\n        let choice = String(this.state.details[this.state.question_num].choices).split(\" \").slice(0, -1);\n        let correct_ans = String(this.state.details[this.state.question_num].correct_answers).split(\" \").slice(0, -1);\n        for (let i = 0; i < choice.length; i++) {\n            <>{ correct_ans.length === 1 &&\n            elements.push(\n            <FormControlLabel value={choice[i]} control={<Radio />} label={choice[i]} />\n            ) }\n            { correct_ans.length > 1 &&\n            elements.push(\n                <FormControlLabel control={<Checkbox onChange={(e) => this.handleCheckBoxChange(e, i)}/>} label={choice[i]} />\n            ) }\n            </>\n        }\n        return [ elements, correct_ans.length ];\n      }\n    \n    next = (event) => {\n        this.setState({\n            question_num: this.state.question_num+1\n        })\n    }\n\n    calcTotScore = () => {\n        let correctPoints = 0;\n        let correct_answers = String(this.state.details[this.state.question_num].correct_answers).split(\" \").slice(0, -1);\n        correct_answers.sort();\n        let answers = this.state.value;\n        answers.sort();\n        for (let question_num = 0; question_num < this.details.length; question_num++)\n        {\n            if (correct_answers === answers) correctPoints += this.state.details[question_num].correct_points;\n            else correctPoints += this.state.details[question_num].wrong_points;\n        }\n        return correctPoints;\n    }\n\n    submit = (event) => {\n        let score = this.calcTotScore();\n        return score\n    }\n\n    handleRadioCheckBox = (radioCheckboxCode) => {\n        let length = radioCheckboxCode[1];\n        radioCheckboxCode = radioCheckboxCode[0];\n        return (\n            <>{length === 1 &&\n            <FormGroup>\n                <FormControl component=\"fieldset\">\n                <FormLabel component=\"legend\">Choices:</FormLabel>\n                    <RadioGroup\n                        aria-label=\"gender\"\n                        name=\"choices\"\n                        onChange={this.handleRadioChange}\n                    >\n                    {radioCheckboxCode}\n                    </RadioGroup>\n            </FormControl>\n            </FormGroup>\n            }\n            {length > 1 && \n            <FormGroup>\n                {radioCheckboxCode}\n            </FormGroup> }\n            </>\n        );\n    }\n\n  render() {\n      let thisQues = this.state.details[this.state.question_num];\n      return(\n            <div>\n            <h1>{thisQues.ques_desc}</h1>\n            {this.handleRadioCheckBox(this.GetRadioCheckBoxCode())}\n            <>{this.state.question_num < this.state.details.length-1 &&\n                <button onClick={this.next}> Next </button>\n            }\n            {this.state.question_num >= this.state.details.length-1 &&\n                <div>\n                <button onClick={this.submit}> Submit </button>\n                </div>\n            }\n            </>\n            </div>\n        );\n  }\n}\n  \nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}